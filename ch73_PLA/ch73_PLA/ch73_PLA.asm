; Listing generated by Microsoft (R) Optimizing Compiler Version 19.12.25835.0 

	TITLE	C:\Users\DOTlaptop\source\repos\ch73_PLA\ch73_PLA\ch73_PLA.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG7352	DB	'%d', 0aH, 00H
$SG7353	DB	'%f', 0aH, 00H
$SG7354	DB	'%c', 0aH, 00H
$SG7355	DB	'%d', 0aH, 00H
$SG7356	DB	'%f', 0aH, 00H
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	_main
PUBLIC	__real@3f800000
PUBLIC	__real@3ff199999999999a
PUBLIC	__real@40000000
PUBLIC	__real@40400000
PUBLIC	__real@40800000
PUBLIC	__real@40a00000
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff199999999999a
CONST	SEGMENT
__real@3ff199999999999a DQ 03ff199999999999ar	; 1.1
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
tv170 = -336						; size = 4
_i2$1 = -332						; size = 4
_i$2 = -328						; size = 4
_i3$3 = -324						; size = 4
_myIntArray$ = -320					; size = 40
_myFloatArray$ = -280					; size = 20
_myCharArray$ = -260					; size = 256
__$ArrayPad$ = -4					; size = 4
_main	PROC
; File c:\users\dotlaptop\source\repos\ch73_pla\ch73_pla\ch73_pla.c
; Line 4
	push	ebp
	mov	ebp, esp
	sub	esp, 336				; 00000150H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 5
	mov	DWORD PTR _myIntArray$[ebp], 100	; 00000064H
	mov	DWORD PTR _myIntArray$[ebp+4], 100	; 00000064H
	mov	DWORD PTR _myIntArray$[ebp+8], 100	; 00000064H
	mov	DWORD PTR _myIntArray$[ebp+12], 100	; 00000064H
	mov	DWORD PTR _myIntArray$[ebp+16], 100	; 00000064H
	mov	DWORD PTR _myIntArray$[ebp+20], 100	; 00000064H
	mov	DWORD PTR _myIntArray$[ebp+24], 100	; 00000064H
	mov	DWORD PTR _myIntArray$[ebp+28], 100	; 00000064H
	mov	DWORD PTR _myIntArray$[ebp+32], 100	; 00000064H
	mov	DWORD PTR _myIntArray$[ebp+36], 100	; 00000064H
; Line 6
	movss	xmm0, DWORD PTR __real@3f800000
	movss	DWORD PTR _myFloatArray$[ebp], xmm0
	movss	xmm0, DWORD PTR __real@40000000
	movss	DWORD PTR _myFloatArray$[ebp+4], xmm0
	movss	xmm0, DWORD PTR __real@40400000
	movss	DWORD PTR _myFloatArray$[ebp+8], xmm0
	movss	xmm0, DWORD PTR __real@40800000
	movss	DWORD PTR _myFloatArray$[ebp+12], xmm0
	movss	xmm0, DWORD PTR __real@40a00000
	movss	DWORD PTR _myFloatArray$[ebp+16], xmm0
; Line 7
	push	256					; 00000100H
	push	0
	lea	eax, DWORD PTR _myCharArray$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 9
	mov	ecx, 4
	shl	ecx, 1
	mov	edx, DWORD PTR _myIntArray$[ebp+ecx]
	push	edx
	push	OFFSET $SG7352
	call	_printf
	add	esp, 8
; Line 10
	mov	eax, 4
	shl	eax, 1
	cvtss2sd xmm0, DWORD PTR _myFloatArray$[ebp+eax]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG7353
	call	_printf
	add	esp, 12					; 0000000cH
; Line 11
	mov	ecx, 1
	shl	ecx, 1
	movsx	edx, BYTE PTR _myCharArray$[ebp+ecx]
	push	edx
	push	OFFSET $SG7354
	call	_printf
	add	esp, 8
; Line 36
	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@main
$LN2@main:
	mov	eax, DWORD PTR _i$2[ebp]
	add	eax, 1
	mov	DWORD PTR _i$2[ebp], eax
$LN4@main:
	cmp	DWORD PTR _i$2[ebp], 10			; 0000000aH
	jge	SHORT $LN3@main
; Line 38
	mov	ecx, DWORD PTR _i$2[ebp]
	add	ecx, 1
	imul	edx, ecx, 10
	mov	eax, DWORD PTR _i$2[ebp]
	mov	DWORD PTR _myIntArray$[ebp+eax*4], edx
; Line 39
	mov	ecx, DWORD PTR _i$2[ebp]
	mov	edx, DWORD PTR _myIntArray$[ebp+ecx*4]
	push	edx
	push	OFFSET $SG7355
	call	_printf
	add	esp, 8
; Line 40
	jmp	SHORT $LN2@main
$LN3@main:
; Line 53
	mov	DWORD PTR _i2$1[ebp], 0
	jmp	SHORT $LN7@main
$LN5@main:
	mov	eax, DWORD PTR _i2$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i2$1[ebp], eax
$LN7@main:
	cmp	DWORD PTR _i2$1[ebp], 5
	jge	SHORT $LN6@main
; Line 55
	cvtsi2sd xmm0, DWORD PTR _i2$1[ebp]
	mulsd	xmm0, QWORD PTR __real@3ff199999999999a
	cvtsd2ss xmm0, xmm0
	mov	ecx, DWORD PTR _i2$1[ebp]
	movss	DWORD PTR _myFloatArray$[ebp+ecx*4], xmm0
; Line 56
	mov	edx, DWORD PTR _i2$1[ebp]
	cvtss2sd xmm0, DWORD PTR _myFloatArray$[ebp+edx*4]
	sub	esp, 8
	movsd	QWORD PTR [esp], xmm0
	push	OFFSET $SG7356
	call	_printf
	add	esp, 12					; 0000000cH
; Line 57
	jmp	SHORT $LN5@main
$LN6@main:
; Line 72
	mov	DWORD PTR _i3$3[ebp], 0
	jmp	SHORT $LN10@main
$LN8@main:
	mov	eax, DWORD PTR _i3$3[ebp]
	add	eax, 1
	mov	DWORD PTR _i3$3[ebp], eax
$LN10@main:
	cmp	DWORD PTR _i3$3[ebp], 255		; 000000ffH
	jge	SHORT $LN9@main
; Line 74
	mov	ecx, DWORD PTR _i3$3[ebp]
	mov	DWORD PTR tv170[ebp], ecx
	cmp	DWORD PTR tv170[ebp], 5
	ja	SHORT $LN21@main
	mov	edx, DWORD PTR tv170[ebp]
	jmp	DWORD PTR $LN23@main[edx*4]
$LN15@main:
; Line 77
	mov	eax, DWORD PTR _i3$3[ebp]
	mov	BYTE PTR _myCharArray$[ebp+eax], 86	; 00000056H
$LN16@main:
; Line 79
	mov	ecx, DWORD PTR _i3$3[ebp]
	mov	BYTE PTR _myCharArray$[ebp+ecx], 69	; 00000045H
$LN17@main:
; Line 81
	mov	edx, DWORD PTR _i3$3[ebp]
	mov	BYTE PTR _myCharArray$[ebp+edx], 82	; 00000052H
$LN18@main:
; Line 83
	mov	eax, DWORD PTR _i3$3[ebp]
	mov	BYTE PTR _myCharArray$[ebp+eax], 73	; 00000049H
$LN19@main:
; Line 85
	mov	ecx, DWORD PTR _i3$3[ebp]
	mov	BYTE PTR _myCharArray$[ebp+ecx], 78	; 0000004eH
$LN20@main:
; Line 87
	mov	edx, DWORD PTR _i3$3[ebp]
	mov	BYTE PTR _myCharArray$[ebp+edx], 71	; 00000047H
$LN21@main:
; Line 91
	jmp	$LN8@main
$LN9@main:
; Line 94
	mov	eax, 1
	test	eax, eax
	je	SHORT $LN14@main
	jmp	SHORT $LN9@main
$LN14@main:
; Line 95
	xor	eax, eax
; Line 97
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN23@main:
	DD	$LN15@main
	DD	$LN16@main
	DD	$LN17@main
	DD	$LN18@main
	DD	$LN19@main
	DD	$LN20@main
_main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _printf
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__ArgList$ = -4						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\stdio.h
; Line 954
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 957
	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax
; Line 958
	mov	ecx, DWORD PTR __ArgList$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	push	1
	call	___acrt_iob_func
	add	esp, 4
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax
; Line 959
	mov	DWORD PTR __ArgList$[ebp], 0
; Line 960
	mov	eax, DWORD PTR __Result$[ebp]
; Line 961
	mov	esp, ebp
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\stdio.h
; Line 642
	push	ebp
	mov	ebp, esp
; Line 643
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	___stdio_common_vfprintf
	add	esp, 24					; 00000018H
; Line 644
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\corecrt_stdio_config.h
; Line 85
	push	ebp
	mov	ebp, esp
; Line 87
	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 88
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
