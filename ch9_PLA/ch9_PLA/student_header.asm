; Listing generated by Microsoft (R) Optimizing Compiler Version 19.12.25835.0 

	TITLE	C:\Users\DOTlaptop\source\repos\ch9_PLA\ch9_PLA\student_header.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_sort_int_array
; Function compile flags: /Odtp
_TEXT	SEGMENT
_temp$ = -12						; size = 4
_j$ = -8						; size = 4
_i$ = -4						; size = 4
_intArray$ = 8						; size = 4
_arrayLen$ = 12						; size = 4
_sort_int_array PROC
; File c:\users\dotlaptop\source\repos\ch9_pla\ch9_pla\student_header.c
; Line 4
	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
; Line 5
	cmp	DWORD PTR _intArray$[ebp], 0
	jne	SHORT $LN8@sort_int_a
; Line 7
	or	eax, -1
	jmp	$LN1@sort_int_a
$LN8@sort_int_a:
; Line 9
	cmp	DWORD PTR _arrayLen$[ebp], 1
	jg	SHORT $LN9@sort_int_a
; Line 11
	mov	eax, -2					; fffffffeH
	jmp	$LN1@sort_int_a
$LN9@sort_int_a:
; Line 13
	mov	DWORD PTR _i$[ebp], 0
; Line 14
	mov	DWORD PTR _j$[ebp], 0
; Line 15
	mov	DWORD PTR _temp$[ebp], 0
; Line 17
	mov	DWORD PTR _j$[ebp], 0
	jmp	SHORT $LN4@sort_int_a
$LN2@sort_int_a:
	mov	eax, DWORD PTR _j$[ebp]
	add	eax, 1
	mov	DWORD PTR _j$[ebp], eax
$LN4@sort_int_a:
	mov	ecx, DWORD PTR _arrayLen$[ebp]
	sub	ecx, 1
	cmp	DWORD PTR _j$[ebp], ecx
	jge	SHORT $LN3@sort_int_a
; Line 19
	mov	DWORD PTR _i$[ebp], 0
	jmp	SHORT $LN7@sort_int_a
$LN5@sort_int_a:
	mov	edx, DWORD PTR _i$[ebp]
	add	edx, 1
	mov	DWORD PTR _i$[ebp], edx
$LN7@sort_int_a:
	mov	eax, DWORD PTR _arrayLen$[ebp]
	sub	eax, 1
	cmp	DWORD PTR _i$[ebp], eax
	jge	SHORT $LN6@sort_int_a
; Line 21
	mov	ecx, DWORD PTR _i$[ebp]
	mov	edx, DWORD PTR _intArray$[ebp]
	mov	eax, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _intArray$[ebp]
	mov	ecx, DWORD PTR [edx+ecx*4+4]
	cmp	ecx, DWORD PTR [esi+eax*4]
	jle	SHORT $LN10@sort_int_a
; Line 23
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _intArray$[ebp]
	mov	ecx, DWORD PTR [eax+edx*4]
	mov	DWORD PTR _temp$[ebp], ecx
; Line 24
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _intArray$[ebp]
	mov	ecx, DWORD PTR _i$[ebp]
	mov	esi, DWORD PTR _intArray$[ebp]
	mov	ecx, DWORD PTR [esi+ecx*4+4]
	mov	DWORD PTR [eax+edx*4], ecx
; Line 25
	mov	edx, DWORD PTR _i$[ebp]
	mov	eax, DWORD PTR _intArray$[ebp]
	mov	ecx, DWORD PTR _temp$[ebp]
	mov	DWORD PTR [eax+edx*4+4], ecx
$LN10@sort_int_a:
; Line 27
	jmp	SHORT $LN5@sort_int_a
$LN6@sort_int_a:
; Line 28
	jmp	SHORT $LN2@sort_int_a
$LN3@sort_int_a:
; Line 29
	xor	eax, eax
$LN1@sort_int_a:
; Line 30
	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
_sort_int_array ENDP
_TEXT	ENDS
END
