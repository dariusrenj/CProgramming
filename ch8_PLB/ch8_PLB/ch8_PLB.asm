; Listing generated by Microsoft (R) Optimizing Compiler Version 19.12.25835.0 

	TITLE	C:\Users\DOTlaptop\source\repos\ch8_PLB\ch8_PLB\ch8_PLB.c
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
$SG7687	DB	'%c: %d', 0aH, 00H
$SG7701	DB	'%s', 0aH, 00H
_DATA	ENDS
PUBLIC	___local_stdio_printf_options
PUBLIC	__vfprintf_l
PUBLIC	_printf
PUBLIC	_print_the_count
PUBLIC	_reverse_it
EXTRN	___acrt_iob_func:PROC
EXTRN	___stdio_common_vfprintf:PROC
EXTRN	_toupper:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memset:PROC
EXTRN	___security_cookie:DWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_temp_char$ = -1					; size = 1
_forwardString$ = 8					; size = 4
_strLen$ = 12						; size = 4
_reverse_it PROC
; File c:\users\dotlaptop\source\repos\ch8_plb\ch8_plb\ch8_plb.c
; Line 49
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 50
	mov	BYTE PTR _temp_char$[ebp], 0
; Line 51
	cmp	DWORD PTR _forwardString$[ebp], 0
	jne	SHORT $LN5@reverse_it
; Line 53
	or	eax, -1
	jmp	SHORT $LN1@reverse_it
$LN5@reverse_it:
; Line 55
	cmp	DWORD PTR _strLen$[ebp], 0
	jne	SHORT $LN6@reverse_it
; Line 57
	mov	eax, -2					; fffffffeH
	jmp	SHORT $LN1@reverse_it
$LN6@reverse_it:
; Line 59
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN4@reverse_it
$LN2@reverse_it:
	mov	eax, DWORD PTR _i$1[ebp]
	add	eax, 1
	mov	DWORD PTR _i$1[ebp], eax
$LN4@reverse_it:
	mov	eax, DWORD PTR _strLen$[ebp]
	cdq
	sub	eax, edx
	sar	eax, 1
	cmp	DWORD PTR _i$1[ebp], eax
	jg	SHORT $LN3@reverse_it
; Line 61
	mov	ecx, DWORD PTR _forwardString$[ebp]
	add	ecx, DWORD PTR _i$1[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _temp_char$[ebp], dl
; Line 62
	mov	eax, DWORD PTR _strLen$[ebp]
	sub	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _forwardString$[ebp]
	add	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _forwardString$[ebp]
	mov	al, BYTE PTR [edx+eax-1]
	mov	BYTE PTR [ecx], al
; Line 63
	mov	ecx, DWORD PTR _strLen$[ebp]
	sub	ecx, DWORD PTR _i$1[ebp]
	mov	edx, DWORD PTR _forwardString$[ebp]
	mov	al, BYTE PTR _temp_char$[ebp]
	mov	BYTE PTR [edx+ecx-1], al
; Line 64
	jmp	SHORT $LN2@reverse_it
$LN3@reverse_it:
; Line 66
	mov	ecx, DWORD PTR _forwardString$[ebp]
	push	ecx
	push	OFFSET $SG7701
	call	_printf
	add	esp, 8
; Line 68
	xor	eax, eax
$LN1@reverse_it:
; Line 69
	mov	esp, ebp
	pop	ebp
	ret	0
_reverse_it ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
_TEXT	SEGMENT
_count$ = -124						; size = 4
_i$1 = -120						; size = 4
_i$2 = -116						; size = 4
_tempChar$ = -109					; size = 1
_table$ = -108						; size = 104
__$ArrayPad$ = -4					; size = 4
_inputString$ = 8					; size = 4
_strLen$ = 12						; size = 4
_print_the_count PROC
; File c:\users\dotlaptop\source\repos\ch8_plb\ch8_plb\ch8_plb.c
; Line 15
	push	ebp
	mov	ebp, esp
	sub	esp, 124				; 0000007cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; Line 16
	mov	BYTE PTR _tempChar$[ebp], 0
; Line 17
	push	104					; 00000068H
	push	0
	lea	eax, DWORD PTR _table$[ebp]
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH
; Line 18
	mov	DWORD PTR _count$[ebp], 0
; Line 20
	cmp	DWORD PTR _inputString$[ebp], 0
	jne	SHORT $LN8@print_the_
; Line 22
	or	eax, -1
	jmp	$LN1@print_the_
; Line 23
	jmp	SHORT $LN9@print_the_
$LN8@print_the_:
; Line 24
	cmp	DWORD PTR _strLen$[ebp], 0
	jne	SHORT $LN9@print_the_
; Line 26
	mov	eax, -2					; fffffffeH
	jmp	$LN1@print_the_
$LN9@print_the_:
; Line 29
	mov	DWORD PTR _i$2[ebp], 0
	jmp	SHORT $LN4@print_the_
$LN2@print_the_:
	mov	ecx, DWORD PTR _i$2[ebp]
	add	ecx, 1
	mov	DWORD PTR _i$2[ebp], ecx
$LN4@print_the_:
	mov	edx, DWORD PTR _i$2[ebp]
	cmp	edx, DWORD PTR _strLen$[ebp]
	jge	SHORT $LN3@print_the_
; Line 31
	mov	eax, DWORD PTR _inputString$[ebp]
	add	eax, DWORD PTR _i$2[ebp]
	movsx	ecx, BYTE PTR [eax]
	cmp	ecx, 65					; 00000041H
	jl	SHORT $LN11@print_the_
	mov	edx, DWORD PTR _inputString$[ebp]
	add	edx, DWORD PTR _i$2[ebp]
	movsx	eax, BYTE PTR [edx]
	cmp	eax, 122				; 0000007aH
	jg	SHORT $LN11@print_the_
; Line 33
	mov	ecx, DWORD PTR _inputString$[ebp]
	add	ecx, DWORD PTR _i$2[ebp]
	mov	dl, BYTE PTR [ecx]
	mov	BYTE PTR _tempChar$[ebp], dl
; Line 34
	movsx	eax, BYTE PTR _tempChar$[ebp]
	push	eax
	call	_toupper
	add	esp, 4
	mov	BYTE PTR _tempChar$[ebp], al
; Line 35
	movsx	ecx, BYTE PTR _tempChar$[ebp]
	mov	edx, DWORD PTR _table$[ebp+ecx*4-260]
	add	edx, 1
	movsx	eax, BYTE PTR _tempChar$[ebp]
	mov	DWORD PTR _table$[ebp+eax*4-260], edx
; Line 36
	mov	ecx, DWORD PTR _count$[ebp]
	add	ecx, 1
	mov	DWORD PTR _count$[ebp], ecx
$LN11@print_the_:
; Line 38
	jmp	SHORT $LN2@print_the_
$LN3@print_the_:
; Line 41
	mov	DWORD PTR _i$1[ebp], 0
	jmp	SHORT $LN7@print_the_
$LN5@print_the_:
	mov	edx, DWORD PTR _i$1[ebp]
	add	edx, 1
	mov	DWORD PTR _i$1[ebp], edx
$LN7@print_the_:
	cmp	DWORD PTR _i$1[ebp], 26			; 0000001aH
	jae	SHORT $LN6@print_the_
; Line 43
	mov	eax, DWORD PTR _i$1[ebp]
	mov	ecx, DWORD PTR _table$[ebp+eax*4]
	push	ecx
	mov	edx, DWORD PTR _i$1[ebp]
	add	edx, 65					; 00000041H
	push	edx
	push	OFFSET $SG7687
	call	_printf
	add	esp, 12					; 0000000cH
; Line 44
	jmp	SHORT $LN5@print_the_
$LN6@print_the_:
; Line 45
	mov	eax, DWORD PTR _count$[ebp]
$LN1@print_the_:
; Line 46
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
_print_the_count ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT _printf
_TEXT	SEGMENT
__Result$ = -8						; size = 4
__ArgList$ = -4						; size = 4
__Format$ = 8						; size = 4
_printf	PROC						; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\stdio.h
; Line 954
	push	ebp
	mov	ebp, esp
	sub	esp, 8
; Line 957
	lea	eax, DWORD PTR __Format$[ebp+4]
	mov	DWORD PTR __ArgList$[ebp], eax
; Line 958
	mov	ecx, DWORD PTR __ArgList$[ebp]
	push	ecx
	push	0
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	push	1
	call	___acrt_iob_func
	add	esp, 4
	push	eax
	call	__vfprintf_l
	add	esp, 16					; 00000010H
	mov	DWORD PTR __Result$[ebp], eax
; Line 959
	mov	DWORD PTR __ArgList$[ebp], 0
; Line 960
	mov	eax, DWORD PTR __Result$[ebp]
; Line 961
	mov	esp, ebp
	pop	ebp
	ret	0
_printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT __vfprintf_l
_TEXT	SEGMENT
__Stream$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vfprintf_l PROC					; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\stdio.h
; Line 642
	push	ebp
	mov	ebp, esp
; Line 643
	mov	eax, DWORD PTR __ArgList$[ebp]
	push	eax
	mov	ecx, DWORD PTR __Locale$[ebp]
	push	ecx
	mov	edx, DWORD PTR __Format$[ebp]
	push	edx
	mov	eax, DWORD PTR __Stream$[ebp]
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax+4]
	push	ecx
	mov	edx, DWORD PTR [eax]
	push	edx
	call	___stdio_common_vfprintf
	add	esp, 24					; 00000018H
; Line 644
	pop	ebp
	ret	0
__vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT
; File c:\program files (x86)\windows kits\10\include\10.0.17134.0\ucrt\corecrt_stdio_config.h
; Line 85
	push	ebp
	mov	ebp, esp
; Line 87
	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage
; Line 88
	pop	ebp
	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
END
